{"version":3,"sources":["svg/zaitra-logo.svg","svg/green-roofs-logo-leaf.svg","img/heatmap.jpg","svg/green-roofs-logo.svg","i18n.ts","containers/App/coordinates.ts","components/Map/index.tsx","components/Navbar/index.tsx","components/SectionTop/index.tsx","components/H2/index.tsx","components/P/index.tsx","components/Shine/index.tsx","components/Container/index.tsx","components/SectionExplanation/index.tsx","components/SectionMotivation/index.tsx","components/MapContainer/index.tsx","components/Footer/index.tsx","containers/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","resources","en","translation","cz","translationCZ","i18n","use","detector","initReactI18next","init","lng","fallbackLng","keySeparator","interpolation","escapeValue","centerPrague","bbOneBounds","bbTwoBounds","heatBounds","defaultGeo","fillOpacity","weight","opacity","color","onEachFeature","feature","layer","bindPopup","closeButton","on","openPopup","closePopup","Map","geojsonData","zoom","center","bounds","heatMapBounds","geoStyle","addFeatures","scrollWheelZoom","TileLayer","url","map","bound","Rectangle","key","shortid","generate","GeoJSON","data","style","undefined","length","ImageOverlay","heatmapImg","Navbar","changeLanguage","className","href","target","rel","src","logo","alt","onClick","type","SectionTop","t","useTranslation","H2","props","children","P","Shine","Container","SectionExplanation","i18nKey","SectionMotivation","MapContainer","Footer","App","allRoofs","bb1Roofs","bb2Roofs","bb1Categ","bb2Categ","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.26b884ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/zaitra-logo.34b5f337.svg\";","module.exports = __webpack_public_path__ + \"static/media/green-roofs-logo-leaf.41eb8d90.svg\";","module.exports = __webpack_public_path__ + \"static/media/heatmap.dc9cf7d9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/green-roofs-logo.9d3a3414.svg\";","import i18n from \"i18next\";\nimport detector from \"i18next-browser-languagedetector\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport translationCZ from \"./locales/cz/translation.json\";\nimport translationEN from \"./locales/en/translation.json\";\n// the translations\nconst resources = {\n  en: {\n    translation: translationEN\n  },\n  cz: {\n    translation: translationCZ\n  }\n};\n\ni18n\n  .use(detector)\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources,\n    lng: \"en\",\n    fallbackLng: \"en\", // use en if detected lng is not available\n    keySeparator: \".\",\n    interpolation: {\n      escapeValue: false // react already safes from xss\n    }\n  });\n\nexport default i18n;\n","/// Center of Prague\nexport const centerPrague = [50.086385, 14.423693];\n// first rectangle\nexport const bbOneBounds = [\n  [50.090759, 14.428063],\n  [50.087322, 14.437146]\n];\n// second rectangle\nexport const bbTwoBounds = [\n  [50.086436, 14.424331],\n  [50.0795, 14.432383]\n];\n// heat coordinates\nexport const heatBounds = [\n  [49.91156, 13.90904],\n  [50.2512, 14.89781]\n];\n","import React from \"react\"\nimport shortid from \"shortid\"\nimport {\n  Map as LeafletMap,\n  TileLayer,\n  GeoJSON,\n  Rectangle,\n  ImageOverlay\n} from \"react-leaflet\"\nimport { LatLngBoundsExpression } from 'leaflet'\nimport heatmapImg from \"../../img/heatmap.jpg\"\nimport { IMapProps } from \"../../types\"\n\nconst defaultGeo = {\n  fillOpacity: 0.7,\n  weight: 2,\n  opacity: 1,\n  color: \"#009548\"\n}\n\nconst Map: React.FC <IMapProps> = ({ \n  geojsonData = [],\n  zoom = 0, center = [0,0], \n  bounds = [],\n  heatMapBounds = [],\n  geoStyle = defaultGeo,\n  addFeatures = true\n}) => {\n  return (\n    <LeafletMap zoom={zoom} center={center} scrollWheelZoom={false}>\n      {/* GENERATE map background */}\n      <TileLayer url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\" />\n\n      {/*\n        * GENERATE rectangle/s \n        *\n      */}\n      {bounds.map((bound: LatLngBoundsExpression) => {\n        return (\n          <Rectangle\n            bounds={bound}\n            color=\"#009548\"\n            opacity={0.8}\n            fillOpacity={0}\n            key={shortid.generate()}\n          />\n        )\n      })}\n      {/* \n        * GENERATE layer/s of geojson \n        *\n      */}\n      {geojsonData.map((geojsonData: GeoJSON.GeoJsonObject) => {\n        return <GeoJSON data={geojsonData} key={shortid.generate()} style={geoStyle} onEachFeature={addFeatures ? onEachFeature : undefined} />\n      })}\n\n      {/* \n        * GENERATE Image overlay \n        * \n      */}\n      {heatMapBounds.length > 0 ? (\n        <ImageOverlay url={heatmapImg} bounds={heatMapBounds} opacity={0.80} />\n      ) : null}\n      \n    </LeafletMap>\n  )\n}\n\nconst onEachFeature = (feature: any, layer: any) => {\n  \n  let labelContent ='Building is in critical area.'\n  layer.bindPopup(labelContent, {closeButton: false});\n  layer.on('mouseover', () => { layer.openPopup(); });\n  layer.on('mouseout', () => { layer.closePopup(); });\n}\n\nexport default Map\n","import React from \"react\";\nimport i18n from \"../../i18n\";\nimport logo from \"../../svg/zaitra-logo.svg\";\n\nconst Navbar: React.FC = () => {\n  const changeLanguage = (lng: any) => {\n    i18n.changeLanguage(lng);\n  };\n  return (\n    <nav className=\"navbar navbar-light fixed-top justify-content-between\">\n      <a\n        href=\"https://zaitra.io/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"navbar-brand\"\n      >\n        <img src={logo} alt=\"Company zaitra logo\" />\n      </a>\n      <div className=\"list\">\n        <button\n          className=\"btn my-2 my-sm-0\"\n          onClick={() => changeLanguage(\"en\")}\n          type=\"button\"\n        >\n          EN\n        </button>\n        <button\n          className=\"btn my-2 my-sm-0\"\n          onClick={() => changeLanguage(\"cz\")}\n          type=\"button\"\n        >\n          CZ\n        </button>\n      </div>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport logo from \"../../svg/green-roofs-logo.svg\"\nimport { useTranslation } from \"react-i18next\";\n\nconst SectionTop: React.FC = () => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"header\">\n      <div className=\"text-vertical-center\">\n        <img src={logo} className=\"logo\" alt=\"Green roofs\" />\n        <h2>{t('sections.top.header')}</h2>\n        <p>{t('sections.top.description')}</p>\n        {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n        <a className=\"arrows\">\n          <span /> <span />\n        </a>\n      </div>\n    </div>\n  )\n}\n\nSectionTop.propTypes = {\n  // eslint-disable-next-line react/require-default-props\n  t: PropTypes.func\n}\n\nexport default SectionTop\n","import React from \"react\"\nimport { H2Props } from \"../../types\"\n\nconst H2: React.FC<H2Props> = (props) => {\n  return <h2 className={`${props.className} h2`}> {props.children}</h2>\n}\n\nexport default H2\n","import React from \"react\"\nimport { IPProps } from \"../../types\"\n\nconst P: React.FC<IPProps> = (props) => {\n  return <p className={`paragraph ${props.className}`}> {props.children}</p>\n}\n\nexport default P \n","import React from \"react\"\nimport { IShineProps } from \"../../types\"\n\nconst Shine: React.FC<IShineProps> = (props) => {\n  return <span className=\"shine\"> {props.children}</span>\n}\n\nexport default Shine\n","import React from \"react\"\nimport { IContainerProps } from \"../../types\"\n\nconst Container: React.FC<IContainerProps> = (props) => {\n  return <div className={`container ${props.className}`}> {props.children}</div>\n}\n\nexport default Container\n","import React from \"react\"\nimport H2 from \"../H2\"\nimport P from \"../P\"\nimport Shine from \"../Shine\"\nimport Container from \"../Container\"\nimport { Trans, useTranslation } from \"react-i18next\"\n\nconst SectionExplanation: React.FC = () => {\n  const { t } = useTranslation();\n  return (\n    <section className=\"section text-center\">\n      <Container>\n        <H2>\n          <Trans i18nKey=\"sections.explanation.header\">\n            <Shine>.</Shine>\n          </Trans>\n        </H2>\n        <P className=\"mt-5\">\n          <Trans i18nKey=\"sections.explanation.description\">\n            {/* each <0></0> tag from translation replace with shine component */}\n            {/* See for details: https://react.i18next.com/latest/trans-component */}\n            <Shine>.</Shine>\n          </Trans>\n        </P>\n      </Container>\n    </section>\n  )\n}\n\nexport default SectionExplanation\n","import React from \"react\"\nimport H2 from \"../H2\"\nimport P from \"../P\"\nimport Shine from \"../Shine\"\nimport Container from \"../Container\"\nimport { useTranslation, Trans } from \"react-i18next\"\n\nconst SectionMotivation: React.FC = () => {\n  const { t } = useTranslation();\n  return (\n    <section className=\"section motivation text-center\">\n      <Container>\n        <H2 className=\"mt-4\">\n          <Shine>{t(\"sections.motivation.header\")}</Shine>\n        </H2>\n        <P className=\"my-5 white\">\n          <Trans i18nKey=\"sections.motivation.par1\">\n            <Shine>.</Shine>\n            <a href=\"https://golemio.cz/en/node/1443#green-roof-analysis\" target=\"blank\" className=\"shine\"></a>\n          </Trans>\n        </P>\n        <P className=\"mb-5 white\">\n          <Trans i18nKey=\"sections.motivation.par2\">\n              <Shine>.</Shine>\n          </Trans>\n        </P>\n      </Container>\n    </section>\n  )\n}\n\nexport default SectionMotivation\n","import React from \"react\"\nimport { IMapContainerProps } from \"../../types\"\n\nconst MapContainer: React.FC<IMapContainerProps> = ({children}) => {\n  return <div className=\"map-container\"> {children}</div>\n}\n\nexport default MapContainer\n","import React from \"react\"\nimport P from \"../P\"\nimport logo from \"../../svg/zaitra-logo.svg\"\n\nconst Footer: React.FC = () => {\n  return (\n    <footer>\n      <P className=\"white\">\n        Copyright ©\n        <img src={logo} alt=\"zaitra logo\" />\n        <a href=\"https://zaitra.io/\" target=\"blank\">\n          Zaitra s.r.o\n        </a>\n        <span> 2020</span>\n      </P>\n    </footer>\n  )\n}\n\nexport default Footer\n","import React from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\n\n// JSONs\nimport allRoofs from \"./data/bb_all_roofs.json\"\nimport bb1Roofs from \"./data/bb1_roofs.json\"\nimport bb2Roofs from \"./data/bb2_roofs.json\"\nimport bb1Categ from \"./data/bb1_roofs_categorized.json\"\nimport bb2Categ from \"./data/bb2_roofs_categorized.json\"\n\nimport { centerPrague, bbOneBounds, bbTwoBounds, heatBounds } from \"./coordinates\";\nimport logo from \"../../svg/green-roofs-logo-leaf.svg\";\n// import components\nimport Map from \"../../components/Map\"\nimport Navbar from \"../../components/Navbar\";\nimport SectionTop from \"../../components/SectionTop\";\nimport SectionExplanation from \"../../components/SectionExplanation\";\nimport SectionMotivation from \"../../components/SectionMotivation\";\nimport Container from \"../../components/Container\";\nimport Shine from \"../../components/Shine\";\nimport H2 from \"../../components/H2\";\nimport P from \"../../components/P\";\nimport MapContainer from \"../../components/MapContainer\";\nimport Footer from \"../../components/Footer\";\n\nconst App: React.FC = () => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"App\">\n      {/*\n       * Nav\n       */}\n      <Navbar />\n      {/*\n       * Top of a page\n       */}\n      <SectionTop />\n       {/*\n       * Explanation what is green roof\n       */}\n      <SectionExplanation />\n      {/*\n       * Motivation why we care about that\n       */}\n      <SectionMotivation />\n      {/*\n       * All roofs map with text\n       */}\n      <Container>\n        <section className=\"section text-center\">\n          <H2>\n            <Trans i18nKey=\"sections.map-description.header\">\n                <Shine>.</Shine>\n            </Trans>\n          </H2>\n          <img className=\"pb-5 pl-3\" src={logo} alt=\"Green roofs logo leaf\" />\n          <P>\n            <Trans i18nKey=\"sections.map-description.description1\">\n                <Shine>.</Shine>\n            </Trans>\n          </P>\n          <P>\n            <Trans i18nKey=\"sections.map-description.description2\">\n                <Shine>.</Shine>\n            </Trans>\n          </P>\n          <P>\n            <Trans i18nKey=\"sections.map-description.description3\">\n                <Shine>.</Shine>\n            </Trans>\n          </P>\n        </section>\n      </Container>\n      {/*\n       * All roofs\n       */}\n      <MapContainer>\n        <Map geojsonData={[allRoofs]} zoom=\"15\" center={centerPrague} addFeatures={false} />\n      </MapContainer>\n      {/*\n       * Roofs only in bounding box 1&2 description + Map\n       */}\n      <Container>\n        <section className=\"section text-center\">\n          <P>\n            <Trans i18nKey=\"sections.map-description-bb.description\">\n              <Shine>.</Shine>\n            </Trans>\n          </P>\n        </section>\n      </Container>\n      <MapContainer>\n        <Map\n          geojsonData={[bb1Roofs, bb2Roofs]}\n          zoom=\"15\"\n          center={centerPrague}\n          heatMapBounds={heatBounds}\n          bounds={[bbOneBounds, bbTwoBounds]}\n        />\n      </MapContainer>\n      {/*\n       * Roofs only in bounding box 1&2 categorized Description + Map\n       */}\n      <Container>\n        <section className=\"section text-center\">\n          <P>\n          <Trans i18nKey=\"sections.map-description-bb-cat.description\">\n            <Shine>.</Shine>\n          </Trans>\n          </P>\n        </section>\n      </Container>\n      <MapContainer>\n        <Map geojsonData={[bb1Categ, bb2Categ]} bounds={[bbOneBounds, bbTwoBounds]}zoom=\"15\" center={centerPrague} />\n      </MapContainer>\n      {/*\n       * Conclusion\n       */}\n      <Container>\n        <section className=\"section text-center\">\n          <P>\n            <Trans i18nKey=\"sections.conclusion\">\n              <Shine>.</Shine>\n            </Trans>\n          </P>\n        </section>\n      </Container>\n      {/*\n       * Footer\n       */}\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"./i18n\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.scss\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./containers/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}